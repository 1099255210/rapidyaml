name: ci

defaults:
  run:
    # Use a bash shell so we can use the same syntax for environment variable
    # access regardless of the host operating system
    shell: bash -e -x {0}

if: "!contains(github.event.head_commit.message, 'skip ci')"
# if: github.ref == 'refs/heads/master'

on:
  - push
  - workflow_dispatch

env:
  PROJ_PFX_TARGET: ryml-
  PROJ_PFX_CMAKE: RYML_
  NUM_JOBS_BUILD: # 4
  CMAKE_FLAGS: -DRYML_TEST_SUITE=ON


# ubuntu-20.04:
#   # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
#   gcc: 7.5.0, 8.4.0, 9.3.0, 10.2.0
#   clang: 8.0.1, 9.0.1, 10.0.0
# ubuntu-18.04:
#   # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu1804-README.md
#   gcc: 7.5.0, 8.4.0, 9.3.0, 10.1.0
#   clang: 6.0.0, 8.0.0, 9.0.0
# ubuntu-16.04:
#   # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu1604-README.md
#   gcc: 5.5.0, 7.5.0, 8.4.0, 9.3.0
#   clang: 6.0.0, 8.0.0, 9.0.1
# macos-11.0: macOS Big Sur 11.0
#   # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11.0-Readme.md
#   Xcode 12.1 11.7
#   clang/LLVM 10.0.1
#   gcc-8 gcc-9
# macos-10.15: macOS Catalina 10.15
#   # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md
#   Xcode 12.1 11.7
#   clang/LLVM 11.0.0
#   gcc-8 gcc-9
# windows-2019:
#   # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
#   vs2019
# windows-2016:
#   # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
#   vs2017
jobs:

  #----------------------------------------------------------------------------
  test_coverage:
    continue-on-error: true
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {std: 11, cxx: g++-7, bt: Coverage, os: ubuntu-18.04, bitlinks: shared64 static64}
          - {std: 11, cxx: g++-7, bt: Coverage, os: ubuntu-18.04, bitlinks: shared32 static32}
          - {std: 17, cxx: g++-7, bt: Coverage, os: ubuntu-18.04, bitlinks: shared64 static64}
          - {std: 17, cxx: g++-7, bt: Coverage, os: ubuntu-18.04, bitlinks: shared32 static32}
    env: {STD: "${{matrix.std}}", CXX_: "${{matrix.cxx}}", BT: "${{matrix.bt}}", BITLINKS: "${{matrix.bitlinks}}", VG: "${{matrix.vg}}", SAN: "${{matrix.san}}", LINT: "${{matrix.lint}}", OS: "${{matrix.os}}", CODECOV_TOKEN: "${{secrets.CODECOV_TOKEN}}", COVERALLS_REPO_TOKEN: "${{secrets.COVERALLS_REPO_TOKEN}}"}
    steps:
      - {name: checkout, uses: actions/checkout@v2, with: {submodules: recursive}}
      - {name: install requirements, run: source .github/reqs.sh && c4_install_test_requirements $OS}
      - {name: show info, run: source .github/setenv.sh && c4_show_info}
      - name: shared64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared64
      - {name: shared64-build, run: source .github/setenv.sh && c4_build_test shared64}
      - {name: shared64-run, run: source .github/setenv.sh && c4_run_test shared64}
      - name: shared64-submit
        run: |
          source .github/setenv.sh
          c4_submit_coverage shared64 codecov
          #c4_submit_coverage shared64 coveralls  # only accepts one submission per job
      - name: static64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static64
      - {name: static64-build, run: source .github/setenv.sh && c4_build_test static64}
      - {name: static64-run, run: source .github/setenv.sh && c4_run_test static64}
      - name: static64-submit
        run: |
          source .github/setenv.sh
          c4_submit_coverage static64 codecov
          c4_submit_coverage static64 coveralls
      - name: static32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static32
      - {name: static32-build, run: source .github/setenv.sh && c4_build_test static32}
      - {name: static32-run, run: source .github/setenv.sh && c4_run_test static32}
      - name: static32-submit
        run: |
          source .github/setenv.sh
          c4_submit_coverage static32 codecov
          #c4_submit_coverage static32 coveralls  # only accepts one submission per job
      - name: shared32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared32
      - {name: shared32-build, run: source .github/setenv.sh && c4_build_test shared32}
      - {name: shared32-run, run: source .github/setenv.sh && c4_run_test shared32}
      - name: shared32-submit
        run: |
          source .github/setenv.sh
          c4_submit_coverage shared32 codecov
          #c4_submit_coverage shared32 coveralls  # only accepts one submission per job
      - name: static32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static32
      - {name: static32-build, run: source .github/setenv.sh && c4_build_test static32}
      - {name: static32-run, run: source .github/setenv.sh && c4_run_test static32}
      - name: static32-submit
        run: |
          source .github/setenv.sh
          c4_submit_coverage static32 codecov
          #c4_submit_coverage static32 coveralls  # only accepts one submission per job

  #----------------------------------------------------------------------------
  test_windows:
    continue-on-error: true
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {std: 11, cxx: vs2017, bt: Debug  , os: windows-2016, bitlinks: shared64 static32}
          - {std: 11, cxx: vs2017, bt: Release, os: windows-2016, bitlinks: shared64 static32}
          - {std: 14, cxx: vs2017, bt: Debug  , os: windows-2016, bitlinks: shared64 static32}
          - {std: 14, cxx: vs2017, bt: Release, os: windows-2016, bitlinks: shared64 static32}
          - {std: 11, cxx: vs2019, bt: Debug  , os: windows-2019, bitlinks: shared64 static32}
          - {std: 11, cxx: vs2019, bt: Release, os: windows-2019, bitlinks: shared64 static32}
          - {std: 17, cxx: vs2019, bt: Debug  , os: windows-2019, bitlinks: shared64 static32}
          - {std: 17, cxx: vs2019, bt: Release, os: windows-2019, bitlinks: shared64 static32}
          - {std: 20, cxx: vs2019, bt: Debug  , os: windows-2019, bitlinks: shared64 static32}
          - {std: 20, cxx: vs2019, bt: Release, os: windows-2019, bitlinks: shared64 static32}
    env: {STD: "${{matrix.std}}", CXX_: "${{matrix.cxx}}", BT: "${{matrix.bt}}", BITLINKS: "${{matrix.bitlinks}}", VG: "${{matrix.vg}}", SAN: "${{matrix.san}}", LINT: "${{matrix.lint}}", OS: "${{matrix.os}}"}
    steps:
      - {name: checkout, uses: actions/checkout@v2, with: {submodules: recursive}}
      - {name: install requirements, run: source .github/reqs.sh && c4_install_test_requirements $OS}
      - {name: show info, run: source .github/setenv.sh && c4_show_info}
      - name: shared64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared64
      - {name: shared64-build, run: source .github/setenv.sh && c4_build_test shared64}
      - {name: shared64-run, run: source .github/setenv.sh && c4_run_test shared64}
      - {name: shared64-pack, run: source .github/setenv.sh && c4_pack shared64}
      - name: static64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static64
      - {name: static64-build, run: source .github/setenv.sh && c4_build_test static64}
      - {name: static64-run, run: source .github/setenv.sh && c4_run_test static64}
      - {name: static64-pack, run: source .github/setenv.sh && c4_pack static64}
      - name: shared32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared32
      - {name: shared32-build, run: source .github/setenv.sh && c4_build_test shared32}
      - {name: shared32-run, run: source .github/setenv.sh && c4_run_test shared32}
      - {name: shared32-pack, run: source .github/setenv.sh && c4_pack shared32}
      - name: static32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static32
      - {name: static32-build, run: source .github/setenv.sh && c4_build_test static32}
      - {name: static32-run, run: source .github/setenv.sh && c4_run_test static32}
      - {name: static32-pack, run: source .github/setenv.sh && c4_pack static32}

  #----------------------------------------------------------------------------
  test_macosx:
    continue-on-error: true
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {std: 11, cxx: xcode, bt: Debug  , os: macos-11.0, bitlinks: shared64 static64}
          - {std: 11, cxx: xcode, bt: Release, os: macos-11.0, bitlinks: shared64 static64}
          - {std: 17, cxx: xcode, bt: Debug  , os: macos-11.0, bitlinks: shared64 static64}
          - {std: 17, cxx: xcode, bt: Release, os: macos-11.0, bitlinks: shared64 static64}
    env: {STD: "${{matrix.std}}", CXX_: "${{matrix.cxx}}", BT: "${{matrix.bt}}", BITLINKS: "${{matrix.bitlinks}}", VG: "${{matrix.vg}}", SAN: "${{matrix.san}}", LINT: "${{matrix.lint}}", OS: "${{matrix.os}}"}
    steps:
      - {name: checkout, uses: actions/checkout@v2, with: {submodules: recursive}}
      - {name: install requirements, run: source .github/reqs.sh && c4_install_test_requirements $OS}
      - {name: show info, run: source .github/setenv.sh && c4_show_info}
      - name: shared64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared64
      - {name: shared64-build, run: source .github/setenv.sh && c4_build_test shared64}
      - {name: shared64-run, run: source .github/setenv.sh && c4_run_test shared64}
      - {name: shared64-pack, run: source .github/setenv.sh && c4_pack shared64}
      - name: static64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static64
      - {name: static64-build, run: source .github/setenv.sh && c4_build_test static64}
      - {name: static64-run, run: source .github/setenv.sh && c4_run_test static64}
      - {name: static64-pack, run: source .github/setenv.sh && c4_pack static64}
      - name: shared32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared32
      - {name: shared32-build, run: source .github/setenv.sh && c4_build_test shared32}
      - {name: shared32-run, run: source .github/setenv.sh && c4_run_test shared32}
      - {name: shared32-pack, run: source .github/setenv.sh && c4_pack shared32}
      - name: static32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static32
      - {name: static32-build, run: source .github/setenv.sh && c4_build_test static32}
      - {name: static32-run, run: source .github/setenv.sh && c4_run_test static32}
      - {name: static32-pack, run: source .github/setenv.sh && c4_pack static32}

  #----------------------------------------------------------------------------
  test_gcc_canary:
    continue-on-error: true
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {std: 11, cxx: g++-7      , bt: Debug  , os: ubuntu-18.04, bitlinks: shared64 static32}
          - {std: 11, cxx: g++-7      , bt: Release, os: ubuntu-18.04, bitlinks: shared64 static32}
          - {std: 20, cxx: g++-10     , bt: Debug  , os: ubuntu-18.04, bitlinks: shared64 static32}
          - {std: 20, cxx: g++-10     , bt: Release, os: ubuntu-18.04, bitlinks: shared64 static32}
          - {std: 11, cxx: g++-5      , bt: Debug  , os: ubuntu-16.04, bitlinks: shared64 static32}
          - {std: 11, cxx: g++-5      , bt: Release, os: ubuntu-16.04, bitlinks: shared64 static32}
    env: {STD: "${{matrix.std}}", CXX_: "${{matrix.cxx}}", BT: "${{matrix.bt}}", BITLINKS: "${{matrix.bitlinks}}", VG: "${{matrix.vg}}", SAN: "${{matrix.san}}", LINT: "${{matrix.lint}}", OS: "${{matrix.os}}"}
    steps:
      - {name: checkout, uses: actions/checkout@v2, with: {submodules: recursive}}
      - {name: install requirements, run: source .github/reqs.sh && c4_install_test_requirements $OS}
      - {name: show info, run: source .github/setenv.sh && c4_show_info}
      - name: shared64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared64
      - {name: shared64-build, run: source .github/setenv.sh && c4_build_test shared64}
      - {name: shared64-run, run: source .github/setenv.sh && c4_run_test shared64}
      - {name: shared64-pack, run: source .github/setenv.sh && c4_pack shared64}
      - name: static64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static64
      - {name: static64-build, run: source .github/setenv.sh && c4_build_test static64}
      - {name: static64-run, run: source .github/setenv.sh && c4_run_test static64}
      - {name: static64-pack, run: source .github/setenv.sh && c4_pack static64}
      - name: static32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static32
      - {name: static32-build, run: source .github/setenv.sh && c4_build_test static32}
      - {name: static32-run, run: source .github/setenv.sh && c4_run_test static32}
      - {name: static32-pack, run: source .github/setenv.sh && c4_pack static32}
      - name: shared32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared32
      - {name: shared32-build, run: source .github/setenv.sh && c4_build_test shared32}
      - {name: shared32-run, run: source .github/setenv.sh && c4_run_test shared32}
      - {name: shared32-pack, run: source .github/setenv.sh && c4_pack shared32}

  #----------------------------------------------------------------------------
  test_clang_canary:
    continue-on-error: true
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {std: 17, cxx: clang++-10 , bt: Debug  , os: ubuntu-18.04, bitlinks: shared64 static32}
          - {std: 17, cxx: clang++-10 , bt: Release, os: ubuntu-18.04, bitlinks: shared64 static32}
          - {std: 11, cxx: clang++-6.0, bt: Debug  , os: ubuntu-16.04, bitlinks: shared64 static32}
          - {std: 11, cxx: clang++-6.0, bt: Release, os: ubuntu-16.04, bitlinks: shared64 static32}
    env: {STD: "${{matrix.std}}", CXX_: "${{matrix.cxx}}", BT: "${{matrix.bt}}", BITLINKS: "${{matrix.bitlinks}}", VG: "${{matrix.vg}}", SAN: "${{matrix.san}}", LINT: "${{matrix.lint}}", OS: "${{matrix.os}}"}
    steps:
      - {name: checkout, uses: actions/checkout@v2, with: {submodules: recursive}}
      - {name: install requirements, run: source .github/reqs.sh && c4_install_test_requirements $OS}
      - {name: show info, run: source .github/setenv.sh && c4_show_info}
      - name: shared64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared64
      - {name: shared64-build, run: source .github/setenv.sh && c4_build_test shared64}
      - {name: shared64-run, run: source .github/setenv.sh && c4_run_test shared64}
      - {name: shared64-pack, run: source .github/setenv.sh && c4_pack shared64}
      - name: static64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static64
      - {name: static64-build, run: source .github/setenv.sh && c4_build_test static64}
      - {name: static64-run, run: source .github/setenv.sh && c4_run_test static64}
      - {name: static64-pack, run: source .github/setenv.sh && c4_pack static64}
      - name: static32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static32
      - {name: static32-build, run: source .github/setenv.sh && c4_build_test static32}
      - {name: static32-run, run: source .github/setenv.sh && c4_run_test static32}
      - {name: static32-pack, run: source .github/setenv.sh && c4_pack static32}
      - name: shared32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared32
      - {name: shared32-build, run: source .github/setenv.sh && c4_build_test shared32}
      - {name: shared32-run, run: source .github/setenv.sh && c4_run_test shared32}
      - {name: shared32-pack, run: source .github/setenv.sh && c4_pack shared32}

  #----------------------------------------------------------------------------
  test_clang_tidy:
    continue-on-error: true
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          # clang tidy takes a long time, so don't do multiple bits/linktypes
          - {std: 11, cxx: clang++-9, bt: Debug             , lint: clang-tidy, bitlinks: shared64 static64, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-9, bt: Debug             , lint: clang-tidy, bitlinks: shared32 static32, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-9, bt: ReleaseWithDebInfo, lint: clang-tidy, bitlinks: shared64 static64, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-9, bt: ReleaseWithDebInfo, lint: clang-tidy, bitlinks: shared32 static32, os: ubuntu-18.04}
    env: {STD: "${{matrix.std}}", CXX_: "${{matrix.cxx}}", BT: "${{matrix.bt}}", BITLINKS: "${{matrix.bitlinks}}", VG: "${{matrix.vg}}", SAN: "${{matrix.san}}", LINT: "${{matrix.lint}}", OS: "${{matrix.os}}"}
    steps:
      - {name: checkout, uses: actions/checkout@v2, with: {submodules: recursive}}
      - {name: install requirements, run: source .github/reqs.sh && c4_install_test_requirements $OS}
      - {name: show info, run: source .github/setenv.sh && c4_show_info}
      - name: shared64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared64
      - {name: shared64-build, run: source .github/setenv.sh && c4_build_test shared64}
      - {name: shared64-run, run: source .github/setenv.sh && c4_run_test shared64}
      - {name: shared64-pack, run: source .github/setenv.sh && c4_pack shared64}
      - name: static64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static64
      - {name: static64-build, run: source .github/setenv.sh && c4_build_test static64}
      - {name: static64-run, run: source .github/setenv.sh && c4_run_test static64}
      - {name: static64-pack, run: source .github/setenv.sh && c4_pack static64}
      - name: static32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static32
      - {name: static32-build, run: source .github/setenv.sh && c4_build_test static32}
      - {name: static32-run, run: source .github/setenv.sh && c4_run_test static32}
      - {name: static32-pack, run: source .github/setenv.sh && c4_pack static32}
      - name: shared32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared32
      - {name: shared32-build, run: source .github/setenv.sh && c4_build_test shared32}
      - {name: shared32-run, run: source .github/setenv.sh && c4_run_test shared32}
      - {name: shared32-pack, run: source .github/setenv.sh && c4_pack shared32}

  #----------------------------------------------------------------------------
  test_gcc_extended:
    continue-on-error: true
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          #                                     VALGRIND
          - {std: 11, cxx: g++-10, bt: Debug  , vg: ON, os: ubuntu-18.04}
          - {std: 11, cxx: g++-10, bt: Release, vg: ON, os: ubuntu-18.04}
          - {std: 14, cxx: g++-10, bt: Debug  , vg: ON, os: ubuntu-18.04}
          - {std: 14, cxx: g++-10, bt: Release, vg: ON, os: ubuntu-18.04}
          - {std: 17, cxx: g++-10, bt: Debug  , vg: ON, os: ubuntu-18.04}
          - {std: 17, cxx: g++-10, bt: Release, vg: ON, os: ubuntu-18.04}
          - {std: 20, cxx: g++-10, bt: Debug  , vg: ON, os: ubuntu-18.04}
          - {std: 20, cxx: g++-10, bt: Release, vg: ON, os: ubuntu-18.04}
          #
          - {std: 11, cxx: g++-9, bt: Debug  , os: ubuntu-18.04}
          - {std: 11, cxx: g++-9, bt: Release, os: ubuntu-18.04}
          - {std: 11, cxx: g++-8, bt: Debug  , os: ubuntu-18.04}
          - {std: 11, cxx: g++-8, bt: Release, os: ubuntu-18.04}
          - {std: 11, cxx: g++-7, bt: Debug  , os: ubuntu-18.04}
          - {std: 11, cxx: g++-7, bt: Release, os: ubuntu-18.04}
          - {std: 11, cxx: g++-6, bt: Debug  , os: ubuntu-18.04}
          - {std: 11, cxx: g++-6, bt: Release, os: ubuntu-18.04}
          - {std: 11, cxx: g++-5, bt: Debug  , os: ubuntu-18.04}
          - {std: 11, cxx: g++-5, bt: Release, os: ubuntu-18.04}
    env: {STD: "${{matrix.std}}", CXX_: "${{matrix.cxx}}", BT: "${{matrix.bt}}", BITLINKS: "${{matrix.bitlinks}}", VG: "${{matrix.vg}}", SAN: "${{matrix.san}}", LINT: "${{matrix.lint}}", OS: "${{matrix.os}}"}
    steps:
      - {name: checkout, uses: actions/checkout@v2, with: {submodules: recursive}}
      - {name: install requirements, run: source .github/reqs.sh && c4_install_test_requirements $OS}
      - {name: show info, run: source .github/setenv.sh && c4_show_info}
      - name: shared64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared64
      - {name: shared64-build, run: source .github/setenv.sh && c4_build_test shared64}
      - {name: shared64-run, run: source .github/setenv.sh && c4_run_test shared64}
      - {name: shared64-pack, run: source .github/setenv.sh && c4_pack shared64}
      - name: static64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static64
      - {name: static64-build, run: source .github/setenv.sh && c4_build_test static64}
      - {name: static64-run, run: source .github/setenv.sh && c4_run_test static64}
      - {name: static64-pack, run: source .github/setenv.sh && c4_pack static64}
      - name: static32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static32
      - {name: static32-build, run: source .github/setenv.sh && c4_build_test static32}
      - {name: static32-run, run: source .github/setenv.sh && c4_run_test static32}
      - {name: static32-pack, run: source .github/setenv.sh && c4_pack static32}
      - name: shared32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared32
      - {name: shared32-build, run: source .github/setenv.sh && c4_build_test shared32}
      - {name: shared32-run, run: source .github/setenv.sh && c4_run_test shared32}
      - {name: shared32-pack, run: source .github/setenv.sh && c4_pack shared32}

  #----------------------------------------------------------------------------
  test_clang_extended:
    continue-on-error: true
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {std: 11, cxx: clang++-9  , bt: Debug  , vg: on, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-9  , bt: Release, vg: on, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-8  , bt: Debug  , vg: on, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-8  , bt: Release, vg: on, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-7  , bt: Debug  , vg: on, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-7  , bt: Release, vg: on, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-6.0, bt: Debug  , vg: on, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-6.0, bt: Release, vg: on, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-5.0, bt: Debug  , vg: on, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-5.0, bt: Release, vg: on, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-4.0, bt: Debug  , vg: on, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-4.0, bt: Release, vg: on, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-3.9, bt: Debug  , vg: on, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-3.9, bt: Release, vg: on, os: ubuntu-18.04}
    env: {STD: "${{matrix.std}}", CXX_: "${{matrix.cxx}}", BT: "${{matrix.bt}}", BITLINKS: "${{matrix.bitlinks}}", VG: "${{matrix.vg}}", SAN: "${{matrix.san}}", LINT: "${{matrix.lint}}", OS: "${{matrix.os}}"}
    steps:
      - {name: checkout, uses: actions/checkout@v2, with: {submodules: recursive}}
      - {name: install requirements, run: source .github/reqs.sh && c4_install_test_requirements $OS}
      - {name: show info, run: source .github/setenv.sh && c4_show_info}
      - name: shared64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared64
      - {name: shared64-build, run: source .github/setenv.sh && c4_build_test shared64}
      - {name: shared64-run, run: source .github/setenv.sh && c4_run_test shared64}
      - {name: shared64-pack, run: source .github/setenv.sh && c4_pack shared64}
      - name: static64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static64
      - {name: static64-build, run: source .github/setenv.sh && c4_build_test static64}
      - {name: static64-run, run: source .github/setenv.sh && c4_run_test static64}
      - {name: static64-pack, run: source .github/setenv.sh && c4_pack static64}
      - name: static32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static32
      - {name: static32-build, run: source .github/setenv.sh && c4_build_test static32}
      - {name: static32-run, run: source .github/setenv.sh && c4_run_test static32}
      - {name: static32-pack, run: source .github/setenv.sh && c4_pack static32}
      - name: shared32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared32
      - {name: shared32-build, run: source .github/setenv.sh && c4_build_test shared32}
      - {name: shared32-run, run: source .github/setenv.sh && c4_run_test shared32}
      - {name: shared32-pack, run: source .github/setenv.sh && c4_pack shared32}

  #----------------------------------------------------------------------------
  test_clang_sanitize:
    continue-on-error: true
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          # these jobs take much longer, so run only one bitlink pair per job to profit from parallelism
          - {std: 11, cxx: clang++-10, bt: Debug  , vg: ON, san: ALL, bitlinks: shared64, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-10, bt: Debug  , vg: ON, san: ALL, bitlinks: static64, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-10, bt: Debug  , vg: ON, san: ALL, bitlinks: shared32, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-10, bt: Debug  , vg: ON, san: ALL, bitlinks: static32, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-10, bt: Release, vg: ON, san: ALL, bitlinks: shared64, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-10, bt: Release, vg: ON, san: ALL, bitlinks: static64, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-10, bt: Release, vg: ON, san: ALL, bitlinks: shared32, os: ubuntu-18.04}
          - {std: 11, cxx: clang++-10, bt: Release, vg: ON, san: ALL, bitlinks: static32, os: ubuntu-18.04}
          - {std: 17, cxx: clang++-10, bt: Debug  , vg: ON, san: ALL, bitlinks: shared64, os: ubuntu-18.04}
          - {std: 17, cxx: clang++-10, bt: Debug  , vg: ON, san: ALL, bitlinks: static64, os: ubuntu-18.04}
          - {std: 17, cxx: clang++-10, bt: Debug  , vg: ON, san: ALL, bitlinks: shared32, os: ubuntu-18.04}
          - {std: 17, cxx: clang++-10, bt: Debug  , vg: ON, san: ALL, bitlinks: static32, os: ubuntu-18.04}
          - {std: 17, cxx: clang++-10, bt: Release, vg: ON, san: ALL, bitlinks: shared64, os: ubuntu-18.04}
          - {std: 17, cxx: clang++-10, bt: Release, vg: ON, san: ALL, bitlinks: static64, os: ubuntu-18.04}
          - {std: 17, cxx: clang++-10, bt: Release, vg: ON, san: ALL, bitlinks: shared32, os: ubuntu-18.04}
          - {std: 17, cxx: clang++-10, bt: Release, vg: ON, san: ALL, bitlinks: static32, os: ubuntu-18.04}
          - {std: 20, cxx: clang++-10, bt: Debug  , vg: ON, san: ALL, bitlinks: shared64, os: ubuntu-18.04}
          - {std: 20, cxx: clang++-10, bt: Debug  , vg: ON, san: ALL, bitlinks: static64, os: ubuntu-18.04}
          - {std: 20, cxx: clang++-10, bt: Debug  , vg: ON, san: ALL, bitlinks: shared32, os: ubuntu-18.04}
          - {std: 20, cxx: clang++-10, bt: Debug  , vg: ON, san: ALL, bitlinks: static32, os: ubuntu-18.04}
          - {std: 20, cxx: clang++-10, bt: Release, vg: ON, san: ALL, bitlinks: shared64, os: ubuntu-18.04}
          - {std: 20, cxx: clang++-10, bt: Release, vg: ON, san: ALL, bitlinks: static64, os: ubuntu-18.04}
          - {std: 20, cxx: clang++-10, bt: Release, vg: ON, san: ALL, bitlinks: shared32, os: ubuntu-18.04}
          - {std: 20, cxx: clang++-10, bt: Release, vg: ON, san: ALL, bitlinks: static32, os: ubuntu-18.04}
    env: {STD: "${{matrix.std}}", CXX_: "${{matrix.cxx}}", BT: "${{matrix.bt}}", BITLINKS: "${{matrix.bitlinks}}", VG: "${{matrix.vg}}", SAN: "${{matrix.san}}", LINT: "${{matrix.lint}}", OS: "${{matrix.os}}"}
    steps:
      - {name: checkout, uses: actions/checkout@v2, with: {submodules: recursive}}
      - {name: install requirements, run: source .github/reqs.sh && c4_install_test_requirements $OS}
      - {name: show info, run: source .github/setenv.sh && c4_show_info}
      - name: shared64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared64
      - {name: shared64-build, run: source .github/setenv.sh && c4_build_test shared64}
      - {name: shared64-run, run: source .github/setenv.sh && c4_run_test shared64}
      - {name: shared64-pack, run: source .github/setenv.sh && c4_pack shared64}
      - name: static64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static64
      - {name: static64-build, run: source .github/setenv.sh && c4_build_test static64}
      - {name: static64-run, run: source .github/setenv.sh && c4_run_test static64}
      - {name: static64-pack, run: source .github/setenv.sh && c4_pack static64}
      - name: static32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test static32
      - {name: static32-build, run: source .github/setenv.sh && c4_build_test static32}
      - {name: static32-run, run: source .github/setenv.sh && c4_run_test static32}
      - {name: static32-pack, run: source .github/setenv.sh && c4_pack static32}
      - name: shared32-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared32
      - {name: shared32-build, run: source .github/setenv.sh && c4_build_test shared32}
      - {name: shared32-run, run: source .github/setenv.sh && c4_run_test shared32}
      - {name: shared32-pack, run: source .github/setenv.sh && c4_pack shared32}

#  #----------------------------------------------------------------------------
#  # https://blog.kitware.com/static-checks-with-cmake-cdash-iwyu-clang-tidy-lwyu-cpplint-and-cppcheck/
#  static_analysis:
#    continue-on-error: true
#    runs-on: ${{matrix.os}}
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
#          # these jobs take much longer, so run only one bitlink pair per job to profit from parallelism
#          - {std: 11, cxx: clang++-10, bt: Debug  , bitlinks: shared64, os: ubuntu-18.04}
#          - {std: 11, cxx: clang++-10, bt: Release, bitlinks: shared64, os: ubuntu-18.04}
#          - {std: 14, cxx: clang++-10, bt: Debug  , bitlinks: shared64, os: ubuntu-18.04}
#          - {std: 14, cxx: clang++-10, bt: Release, bitlinks: shared64, os: ubuntu-18.04}
#          - {std: 17, cxx: clang++-10, bt: Debug  , bitlinks: shared64, os: ubuntu-18.04}
#          - {std: 17, cxx: clang++-10, bt: Release, bitlinks: shared64, os: ubuntu-18.04}
#          - {std: 20, cxx: clang++-10, bt: Debug  , bitlinks: shared64, os: ubuntu-18.04}
#          - {std: 20, cxx: clang++-10, bt: Release, bitlinks: shared64, os: ubuntu-18.04}
#    env: {STD: "${{matrix.std}}", CXX_: "${{matrix.cxx}}", BT: "${{matrix.bt}}", BITLINKS: "${{matrix.bitlinks}}", VG: "${{matrix.vg}}", SAN: "${{matrix.san}}", LINT: "${{matrix.lint}}", OS: "${{matrix.os}}"}
#    steps:
#      - {name: checkout, uses: actions/checkout@v2, with: {submodules: recursive}}
#      - {name: install requirements, run: source .github/reqs.sh && c4_install_test_requirements $OS}
#      - {name: show info, run: source .github/setenv.sh && c4_show_info}
#      - name: shared64-configure---------------------------------------------------
#        run: source .github/setenv.sh && c4_cfg_test shared64
#      - {name: shared64-build, run: source .github/setenv.sh && c4_build_test shared64}
#      - {name: clang-tidy, run: cmake "-DCMAKE_CXX_CLANG_TIDY=/usr/bin/clang-tidy-3.9;-checks=*" ../path/to/source}
#      - {name: cppcheck, run: cmake "-DCMAKE_CXX_CPPCHECK=/usr/bin/cppcheck;--std=c++11" ../path/to/source}
#      - {name: cpplint, run: cmake "-DCMAKE_CXX_CPPLINT=/usr/local/bin/cpplint;--linelength=179" ..}
#      - {name: include-what-you-use, run: cmake "-DCMAKE_CXX_INCLUDE_WHAT_YOU_USE=/usr/bin/iwyu;--transitive_includes_only" ..}
#      - {name: link-what-you-use, run: cmake -DCMAKE_LINK_WHAT_YOU_USE=TRUE ..}

  #----------------------------------------------------------------------------
  test_api:
    continue-on-error: true
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {bt: Release, os: ubuntu-18.04}
          - {bt: Release, os: windows-2019}
    env: {STD: "${{matrix.std}}", CXX_: "${{matrix.cxx}}", BT: "${{matrix.bt}}", BITLINKS: "${{matrix.bitlinks}}", VG: "${{matrix.vg}}", SAN: "${{matrix.san}}", LINT: "${{matrix.lint}}", OS: "${{matrix.os}}",
          CMAKE_FLAGS: "-DRYML_DEV=OFF -DRYML_BUILD_API=ON -DRYML_API_TESTS=ON -DRYML_API_BENCHMARKS=OFF"}
    steps:
      - {name: checkout, uses: actions/checkout@v2, with: {submodules: recursive}}
      - {name: install requirements, run: source .github/reqs.sh && c4_install_test_requirements $OS}
      - {name: show info, run: source .github/setenv.sh && c4_show_info && which swig }
      - name: api-shared64-configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test shared64
      - {name: api-shared64-python-build, run: source .github/setenv.sh && c4_build_target shared64 ryml-api-python3}
      - {name: api-shared64-python-test, run: source .github/setenv.sh && c4_build_target shared64 ryml-api-test-python3}


#--------------------------------------------------------------------------------------
# https://cristianadam.eu/20191222/using-github-actions-with-c-plus-plus-and-cmake/
#name: CMake Build Matrix
#on: [push]
#jobs:
#
#  build:
#    name: ${{ matrix.config.name }}
#    runs-on: ${{ matrix.config.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        config:
#        - {
#            name: "Windows Latest MSVC", artifact: "Windows-MSVC.tar.xz",
#            os: windows-latest,
#            build_type: "Release", cc: "cl", cxx: "cl",
#            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
#          }
#        - {
#            name: "Windows Latest MinGW", artifact: "Windows-MinGW.tar.xz",
#            os: windows-latest,
#            build_type: "Release", cc: "gcc", cxx: "g++"
#          }
#        - {
#            name: "Ubuntu Latest GCC", artifact: "Linux.tar.xz",
#            os: ubuntu-latest,
#            build_type: "Release", cc: "gcc", cxx: "g++"
#          }
#        - {
#            name: "macOS Latest Clang", artifact: "macOS.tar.xz",
#            os: macos-latest,
#            build_type: "Release", cc: "clang", cxx: "clang++"
#          }
#    steps:
#    - uses: actions/checkout@v1
#    - name: Download Ninja and CMake
#      id: cmake_and_ninja
#      shell: cmake -P {0}
#      run: |
#        set(ninja_version "1.9.0")
#        set(cmake_version "3.16.2")
#        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")
#        if ("${{ runner.os }}" STREQUAL "Windows")
#          set(ninja_suffix "win.zip")
#          set(cmake_suffix "win64-x64.zip")
#          set(cmake_dir "cmake-${cmake_version}-win64-x64/bin")
#        elseif ("${{ runner.os }}" STREQUAL "Linux")
#          set(ninja_suffix "linux.zip")
#          set(cmake_suffix "Linux-x86_64.tar.gz")
#          set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")
#        elseif ("${{ runner.os }}" STREQUAL "macOS")
#          set(ninja_suffix "mac.zip")
#          set(cmake_suffix "Darwin-x86_64.tar.gz")
#          set(cmake_dir "cmake-${cmake_version}-Darwin-x86_64/CMake.app/Contents/bin")
#        endif()
#        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
#        file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
#        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)
#        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
#        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
#        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)
#        # Save the path for other steps
#        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
#        message("::set-output name=cmake_dir::${cmake_dir}")
#        if (NOT "${{ runner.os }}" STREQUAL "Windows")
#          execute_process(
#            COMMAND chmod +x ninja
#            COMMAND chmod +x ${cmake_dir}/cmake
#          )
#        endif()
#    - name: Configure
#      shell: cmake -P {0}
#      run: |
#        set(ENV{CC} ${{ matrix.config.cc }})
#        set(ENV{CXX} ${{ matrix.config.cxx }})
#        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
#          execute_process(
#            COMMAND "${{ matrix.config.environment_script }}" && set
#            OUTPUT_FILE environment_script_output.txt
#          )
#          file(STRINGS environment_script_output.txt output_lines)
#          foreach(line IN LISTS output_lines)
#            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
#              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
#            endif()
#          endforeach()
#        endif()
#        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/ninja" ninja_program)
#        execute_process(
#          COMMAND ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/cmake
#            -S .
#            -B build
#            -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
#            -G Ninja
#            -D CMAKE_MAKE_PROGRAM=${ninja_program}
#          RESULT_VARIABLE result
#        )
#        if (NOT result EQUAL 0)
#          message(FATAL_ERROR "Bad exit status")
#        endif()
#    - name: Build
#      shell: cmake -P {0}
#      run: |
#        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")
#        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
#          file(STRINGS environment_script_output.txt output_lines)
#          foreach(line IN LISTS output_lines)
#            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
#              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
#            endif()
#          endforeach()
#        endif()
#        execute_process(
#          COMMAND ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/cmake --build build
#          RESULT_VARIABLE result
#        )
#        if (NOT result EQUAL 0)
#          message(FATAL_ERROR "Bad exit status")
#        endif()
#    - name: Run tests
#      shell: cmake -P {0}
#      run: |
#        include(ProcessorCount)
#        ProcessorCount(N)
#        execute_process(
#          COMMAND ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/ctest -j ${N}
#          WORKING_DIRECTORY build
#          RESULT_VARIABLE result
#        )
#        if (NOT result EQUAL 0)
#          message(FATAL_ERROR "Running tests failed!")
#        endif()
#    - name: Install Strip
#      run: ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/cmake --install build --prefix instdir --strip
#    - name: Pack
#      working-directory: instdir
#      run: ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/cmake -E tar cJfv ../${{ matrix.config.artifact }} .
#    - name: Upload
#      uses: actions/upload-artifact@v1
#      with:
#        path: ./${{ matrix.config.artifact }}
#        name: ${{ matrix.config.artifact }}
#
#  release:
#    if: contains(github.ref, 'tags/v')
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#    - name: Create Release
#      id: create_release
#      uses: actions/create-release@v1.0.0
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: ${{ github.ref }}
#        release_name: Release ${{ github.ref }}
#        draft: false
#        prerelease: false
#    - name: Store Release url
#      run: |
#        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url
#    - uses: actions/upload-artifact@v1
#      with:
#        path: ./upload_url
#        name: upload_url
#
#  publish:
#    if: contains(github.ref, 'tags/v')
#    name: ${{ matrix.config.name }}
#    runs-on: ${{ matrix.config.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        config:
#        - {
#            name: "Windows Latest MSVC", artifact: "Windows-MSVC.tar.xz",
#            os: ubuntu-latest
#          }
#        - {
#            name: "Windows Latest MinGW", artifact: "Windows-MinGW.tar.xz",
#            os: ubuntu-latest
#          }
#        - {
#            name: "Ubuntu Latest GCC", artifact: "Linux.tar.xz",
#            os: ubuntu-latest
#          }
#        - {
#            name: "macOS Latest Clang", artifact: "macOS.tar.xz",
#            os: ubuntu-latest
#          }
#    needs: release
#    steps:
#    - name: Download artifact
#      uses: actions/download-artifact@v1
#      with:
#        name: ${{ matrix.config.artifact }}
#        path: ./
#    - name: Download URL
#      uses: actions/download-artifact@v1
#      with:
#        name: upload_url
#        path: ./
#    - id: set_upload_url
#      run: |
#        upload_url=`cat ./upload_url`
#        echo ::set-output name=upload_url::$upload_url
#    - name: Upload to Release
#      id: upload_to_release
#      uses: actions/upload-release-asset@v1.0.1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
#        asset_path: ./${{ matrix.config.artifact }}
#        asset_name: ${{ matrix.config.artifact }}
#        asset_content_type: application/x-gtar
